}
}
for (i in 1:38) {
for (j in 1:38) {
neg[i,j] <- rbinom(1, 1, .02)*-1
}
}
View(neg)
View(pos)
p <- t(pos)
pos <- pos %*% p
n <- t(neg)
neg <- neg %*% n
View(pos)
pos <- matrix(0, 38, 38)
neg <- matrix(0, 38, 38)
for (i in 1:38) {
for (j in 1:38) {
pos[i,j] <- rbinom(1, 1, .08)
}
}
for (i in 1:38) {
for (j in 1:38) {
neg[i,j] <- rbinom(1, 1, .02)*-1
}
}
p <- t(pos)
pos <- pos %+% p
p <- t(pos)
pos <- pos + p
n <- t(neg)
neg <- neg + n
network <- pos + neg
diag(network) = 0
View(network)
graph <- graph_from_adjacency_matrix(network, mode = "directed", weighted = T)
library(igraph)
graph <- graph_from_adjacency_matrix(network, mode = "directed", weighted = T)
plot(graph)
#Color Coding the Network Ties
E(network)$color <- if_else(E(network)$weight > 0, "green3", "red3")
library(network)
library(devtools)
library(sna)
library(igraph)
library(tidyverse)
E(network)$color <- if_else(E(network)$weight > 0, "green3", "red3")
graph <- graph_from_adjacency_matrix(network, mode = "directed", weighted = T)
E(network)$color <- if_else(E(network)$weight > 0, "green3", "red3")
#Color Coding the Network Ties
E(network)$color <- if_else( network$weight > 0, "green3", "red3")
#Color Coding the Network Ties
E(network)$color <- if_else( network@weight > 0, "green3", "red3")
#Color Coding the Network Ties
E(network)$color <- if_else( network > 0, "green3", "red3")
#Color Coding the Network Ties
E(network)$color <- if_else( E(network) > 0, "green3", "red3")
plot(graph, edge.color = if_else(E(network) > 0, "green3", "red3"))
plot(graph, edge.color = if_else(E(network) > 0, "green3", "red3"))
#Color Coding the Network Ties
E(graph)$color <- if_else( E(graph) > 0, "green3", "red3")
plot(graph)
View(network)
#Color Coding the Network Ties
E(graph)$color <- if_else( E(graph)$weight > 0, "green3", "red3")
plot(graph)
E(graph)$color <- if_else( E(graph)$weight > 0, "green3", "red3")
V(graph)$label <- NA
V(graph)$size <- degree(graph, v = V(graph), mode = "in")
V(graph)$size <- degree(graph, mode = "in")
V(graph)$size <- degree(graph)
V(graph)$size <- igraph::degree(graph, v = V(graph), mode = "in")
E(graph)$color <- if_else( E(graph)$weight > 0, "green3", "red3")
V(graph)$label <- NA
V(graph)$size <- igraph::degree(graph, v = V(graph), mode = "in")
plot(graph)
plot(graph, layout=layout_with_fr)
E(graph)$color <- if_else( E(graph)$weight > 0, "green3", "red3")
V(graph)$label <- NA
V(graph)$size <- igraph::degree(graph, v = V(graph), mode = "in")*10
plot(graph, layout=layout_with_fr)
E(graph)$color <- if_else( E(graph)$weight > 0, "green3", "red3")
V(graph)$label <- NA
V(graph)$size <- igraph::degree(graph, v = V(graph), mode = "in")*2
plot(graph, layout=layout_with_fr)
t1 <- as.matrix(read.delim("~/desktop/Repository/Agent-Based-Models/Data/Marijtje-Signed-Longitudinal/t1.dat", header = F, sep = " "))
t2 <- as.matrix(read.delim("~/desktop/Repository/Agent-Based-Models/Data/Marijtje-Signed-Longitudinal/t2.dat", header = F, sep = " "))
t3 <- as.matrix(read.delim("~/desktop/Repository/Agent-Based-Models/Data/Marijtje-Signed-Longitudinal/t3.dat", header = F, sep = " "))
t4 <- as.matrix(read.delim("~/desktop/Repository/Agent-Based-Models/Data/Marijtje-Signed-Longitudinal/t4.dat", header = F, sep = " "))
cov1 <- read.delim("~/desktop/Repository/Agent-Based-Models/Data/Marijtje-Signed-Longitudinal/cov1.dat", header = F, sep = " ", na.strings = "NA")
cov4 <- read.delim("~/desktop/Repository/Agent-Based-Models/Data/Marijtje-Signed-Longitudinal/cov4.dat", header = F, sep = " ", na.strings = "NA")
#Network Objects
#t1.net <- as.network(t1)
#t2.net <- as.network(t2)
#t3.net <- as.network(t3)
#t4.net <- as.network(t4)
#summary(t1.net)
#summary(t2.net)
#summary(t3.net)
#summary(t4.net)
View(t1)
for (i in 1:38) {
for (j in 1:38) {
t3[i,j] <- if_else(t3[i,j] == 1, 1,
if_else(t3[i,j] == 2, 1,
if_else(t3[i,j] == 3, 1,
if_else(t3[i,j] == 4, 0, #Neutral relationships = 0?
if_else(t3[i,j] == 5, -1, 0)))))
}
}
for (i in 1:38) {
for (j in 1:38) {
t4[i,j] <- if_else(t4[i,j] == 1, 1,
if_else(t4[i,j] == 2, 1,
if_else(t4[i,j] == 3, 1,
if_else(t4[i,j] == 4, 0, #Neutral relationships = 0?
if_else(t4[i,j] == 5, -1, 0)))))
}
}
for (i in 1:38) {
for (j in 1:38) {
t2[i,j] <- if_else(t2[i,j] == 1, 1,
if_else(t2[i,j] == 2, 1,
if_else(t2[i,j] == 3, 1,
if_else(t2[i,j] == 4, 0, #Neutral relationships = 0?
if_else(t2[i,j] == 5, -1, 0)))))
}
}
for (i in 1:38) {
for (j in 1:38) {
t1[i,j] <- if_else(t1[i,j] == 1, 1,
if_else(t1[i,j] == 2, 1,
if_else(t1[i,j] == 3, 1,
if_else(t1[i,j] == 4, 0, #Neutral relationships = 0?
if_else(t1[i,j] == 5, -1, 0)))))
}
}
t1.net <- graph_from_adjacency_matrix(t1, mode = "directed", weighted = T)
t2.net <- graph_from_adjacency_matrix(t2, mode = "directed", weighted = T)
t3.net <- graph_from_adjacency_matrix(t3, mode = "directed", weighted = T)
t4.net <- graph_from_adjacency_matrix(t4, mode = "directed", weighted = T)
E(t1.net)$color <- if_else( E(t1.net)$weight > 0, "green3", "red3")
V(t1.net)$label <- NA
V(t1.net)$size <- igraph::degree(t1.net, v = V(t1.net), mode = "in")*2
#Initial Graph
plot(t1.net, layout=layout_with_fr)
E(t2.net)$color <- if_else( E(t2.net)$weight > 0, "green3", "red3")
V(t2.net)$label <- NA
V(t2.net)$size <- igraph::degree(t2.net, v = V(t2.net), mode = "in")*2
plot(t2.net, layout=layout_with_fr)
#Time 3
E(t3.net)$color <- if_else( E(t3.net)$weight > 0, "green3", "red3")
V(t3.net)$label <- NA
V(t3.net)$size <- igraph::degree(t3.net, v = V(t3.net), mode = "in")*2
plot(t3.net, layout=layout_with_fr)
#Time 4
E(t4.net)$color <- if_else( E(t4.net)$weight > 0, "green3", "red3")
V(t4.net)$label <- NA
V(t4.net)$size <- igraph::degree(t4.net, v = V(t4.net), mode = "in")*2
plot(t4.net, layout=layout_with_fr)
t1.net <- graph_from_adjacency_matrix(t1, mode = "directed", weighted = T)
t2.net <- graph_from_adjacency_matrix(t2, mode = "directed", weighted = T)
t3.net <- graph_from_adjacency_matrix(t3, mode = "directed", weighted = T)
t4.net <- graph_from_adjacency_matrix(t4, mode = "directed", weighted = T)
E(t1.net)$color <- if_else( E(t1.net)$weight > 0, "green3", "red3")
V(t1.net)$label <- NA
V(t1.net)$size <- igraph::degree(t1.net, v = V(t1.net), mode = "in")*2
time1 <- plot(t1.net, layout=layout_with_fr)
#Time 2
E(t2.net)$color <- if_else( E(t2.net)$weight > 0, "green3", "red3")
V(t2.net)$label <- NA
V(t2.net)$size <- igraph::degree(t2.net, v = V(t2.net), mode = "in")*2
time2 <- plot(t2.net, layout=layout_with_fr)
#Time 3
E(t3.net)$color <- if_else( E(t3.net)$weight > 0, "green3", "red3")
V(t3.net)$label <- NA
V(t3.net)$size <- igraph::degree(t3.net, v = V(t3.net), mode = "in")*2
time3 <- plot(t3.net, layout=layout_with_fr)
#Time 4
E(t4.net)$color <- if_else( E(t4.net)$weight > 0, "green3", "red3")
V(t4.net)$label <- NA
V(t4.net)$size <- igraph::degree(t4.net, v = V(t4.net), mode = "in")*2
time4 <- plot(t4.net, layout=layout_with_fr)
time1
time2
time3
time4
t1.net <- graph_from_adjacency_matrix(t1, mode = "directed", weighted = T)
t2.net <- graph_from_adjacency_matrix(t2, mode = "directed", weighted = T)
t3.net <- graph_from_adjacency_matrix(t3, mode = "directed", weighted = T)
t4.net <- graph_from_adjacency_matrix(t4, mode = "directed", weighted = T)
E(t1.net)$color <- if_else( E(t1.net)$weight > 0, "green3", "red3")
V(t1.net)$label <- NA
V(t1.net)$size <- igraph::degree(t1.net, v = V(t1.net), mode = "in")*2
time1 <- plot(t1.net)
#Time 2
E(t2.net)$color <- if_else( E(t2.net)$weight > 0, "green3", "red3")
V(t2.net)$label <- NA
V(t2.net)$size <- igraph::degree(t2.net, v = V(t2.net), mode = "in")*2
time2 <- plot(t2.net)
#Time 3
E(t3.net)$color <- if_else( E(t3.net)$weight > 0, "green3", "red3")
V(t3.net)$label <- NA
V(t3.net)$size <- igraph::degree(t3.net, v = V(t3.net), mode = "in")*2
time3 <- plot(t3.net)
#Time 4
E(t4.net)$color <- if_else( E(t4.net)$weight > 0, "green3", "red3")
V(t4.net)$label <- NA
V(t4.net)$size <- igraph::degree(t4.net, v = V(t4.net), mode = "in")*2
time4 <- plot(t4.net)
time1
time2
time3
time4
View(t3)
time3 <- plot(t3.net, layout=layout_in_circle())
time3 <- plot(t3.net, layout=layout_in_circle)
t1.net <- graph_from_adjacency_matrix(t1, mode = "directed", weighted = T)
t2.net <- graph_from_adjacency_matrix(t2, mode = "directed", weighted = T)
t3.net <- graph_from_adjacency_matrix(t3, mode = "directed", weighted = T)
t4.net <- graph_from_adjacency_matrix(t4, mode = "directed", weighted = T)
E(t1.net)$color <- if_else( E(t1.net)$weight > 0, "green3", "red3")
V(t1.net)$label <- NA
V(t1.net)$size <- igraph::degree(t1.net, v = V(t1.net), mode = "in")*2
time1 <- plot(t1.net, layout=layout_in_circle())
t1.net <- graph_from_adjacency_matrix(t1, mode = "directed", weighted = T)
t2.net <- graph_from_adjacency_matrix(t2, mode = "directed", weighted = T)
t3.net <- graph_from_adjacency_matrix(t3, mode = "directed", weighted = T)
t4.net <- graph_from_adjacency_matrix(t4, mode = "directed", weighted = T)
#Time 1
E(t1.net)$color <- if_else( E(t1.net)$weight > 0, "green3", "red3")
V(t1.net)$label <- NA
V(t1.net)$size <- igraph::degree(t1.net, v = V(t1.net), mode = "in")*2
time1 <- plot(t1.net, layout=layout_in_circle)
#Time 2
E(t2.net)$color <- if_else( E(t2.net)$weight > 0, "green3", "red3")
V(t2.net)$label <- NA
V(t2.net)$size <- igraph::degree(t2.net, v = V(t2.net), mode = "in")*2
time2 <- plot(t2.net, layout=layout_in_circle)
#Time 3
E(t3.net)$color <- if_else( E(t3.net)$weight > 0, "green3", "red3")
V(t3.net)$label <- NA
V(t3.net)$size <- igraph::degree(t3.net, v = V(t3.net), mode = "in")*2
time3 <- plot(t3.net, layout=layout_in_circle)
#Time 4
E(t4.net)$color <- if_else( E(t4.net)$weight > 0, "green3", "red3")
V(t4.net)$label <- NA
V(t4.net)$size <- igraph::degree(t4.net, v = V(t4.net), mode = "in")*2
time4 <- plot(t4.net, layout=layout_in_circle)
time1
time2
time3
time4
#Simulated Positive and Negative Tie Data
pos <- matrix(0, 38, 38)
neg <- matrix(0, 38, 38)
for (i in 1:38) {
for (j in 1:38) {
pos[i,j] <- rbinom(1, 1, .08)
}
}
for (i in 1:38) {
for (j in 1:38) {
neg[i,j] <- rbinom(1, 1, .02)*-1
}
}
#Imposing Symetry
p <- t(pos)
pos <- pos + p
n <- t(neg)
neg <- neg + n
network <- pos + neg
graph <- graph_from_adjacency_matrix(network, mode = "directed", weighted = T)
E(graph)$color <- if_else( E(graph)$weight > 0, "green3", "red3")
V(graph)$label <- NA
V(graph)$size <- igraph::degree(graph, v = V(t4.net), mode = "in")*2
graph <- graph_from_adjacency_matrix(network, mode = "directed", weighted = T)
E(graph)$color <- if_else( E(graph)$weight > 0, "green3", "red3")
V(graph)$label <- NA
V(graph)$size <- igraph::degree(graph, v = V(graph), mode = "in")*2
plot1 <- plot(graph, layout=layout_in_circle)
plot1 <- plot(graph, layout=layout_with_fr)
#Simulated Positive and Negative Tie Data
pos <- matrix(0, 38, 38)
neg <- matrix(0, 38, 38)
for (i in 1:38) {
for (j in 1:38) {
pos[i,j] <- rbinom(1, 1, .08)
}
}
for (i in 1:38) {
for (j in 1:38) {
neg[i,j] <- rbinom(1, 1, .02)*-1
}
}
#Imposing Symetry
p <- t(pos)
pos <- pos + p
n <- t(neg)
neg <- neg + n
network <- pos + neg
#Initial Network Visual
graph <- graph_from_adjacency_matrix(network, mode = "directed", weighted = T)
E(graph)$color <- if_else( E(graph)$weight > 0, "green3", "red3")
V(graph)$label <- NA
V(graph)$size <- igraph::degree(graph, v = V(graph), mode = "in")*2
plot1 <- plot(graph, layout=layout_with_fr)
#Simulated Positive and Negative Tie Data
pos <- matrix(0, 38, 38)
neg <- matrix(0, 38, 38)
for (i in 1:38) {
for (j in 1:38) {
pos[i,j] <- rbinom(1, 1, .08)
}
}
for (i in 1:38) {
for (j in 1:38) {
neg[i,j] <- rbinom(1, 1, .02)*-1
}
}
#Imposing Symetry
p <- t(pos)
pos <- pos + p
n <- t(neg)
neg <- neg + n
network <- pos + neg
diag(network) <- 0
#Initial Network Visual
graph <- graph_from_adjacency_matrix(network, mode = "directed", weighted = T)
E(graph)$color <- if_else( E(graph)$weight > 0, "green3", "red3")
V(graph)$label <- NA
V(graph)$size <- igraph::degree(graph, v = V(graph), mode = "in")*2
plot1 <- plot(graph, layout=layout_with_fr)
#Making a Signed Graph Objects (Times 1:4)
t1.net <- graph_from_adjacency_matrix(t1, mode = "directed", weighted = T)
t2.net <- graph_from_adjacency_matrix(t2, mode = "directed", weighted = T)
t3.net <- graph_from_adjacency_matrix(t3, mode = "directed", weighted = T)
t4.net <- graph_from_adjacency_matrix(t4, mode = "directed", weighted = T)
#Time 1
E(t1.net)$color <- if_else( E(t1.net)$weight > 0, "green3", "red3")
#V(t1.net)$label <- NA
V(t1.net)$size <- igraph::degree(t1.net, v = V(t1.net), mode = "in")*2
time1 <- plot(t1.net, layout=layout_in_circle)
#Time 2
E(t2.net)$color <- if_else( E(t2.net)$weight > 0, "green3", "red3")
#V(t2.net)$label <- NA
V(t2.net)$size <- igraph::degree(t2.net, v = V(t2.net), mode = "in")*2
time2 <- plot(t2.net, layout=layout_in_circle)
#Time 3
E(t3.net)$color <- if_else( E(t3.net)$weight > 0, "green3", "red3")
#V(t3.net)$label <- NA
V(t3.net)$size <- igraph::degree(t3.net, v = V(t3.net), mode = "in")*2
time3 <- plot(t3.net, layout=layout_in_circle)
#Time 4
E(t4.net)$color <- if_else( E(t4.net)$weight > 0, "green3", "red3")
#V(t4.net)$label <- NA
V(t4.net)$size <- igraph::degree(t4.net, v = V(t4.net), mode = "in")*2
time4 <- plot(t4.net, layout=layout_in_circle)
time1
time2
time3
time4
time1
time2
time3
time4
par(mfrow=c(2,2), mai = c(0,0,0.7,0))
par(mfrow=c(2,2), mai = c(0,0,0.7,0))
op <- par(mfrow=c(2,2), mai = c(0,0,0.7,0))
#Making a Signed Graph Objects (Times 1:4)
t1.net <- graph_from_adjacency_matrix(t1, mode = "directed", weighted = T)
t2.net <- graph_from_adjacency_matrix(t2, mode = "directed", weighted = T)
t3.net <- graph_from_adjacency_matrix(t3, mode = "directed", weighted = T)
t4.net <- graph_from_adjacency_matrix(t4, mode = "directed", weighted = T)
#Time 1
E(t1.net)$color <- if_else( E(t1.net)$weight > 0, "green3", "red3")
#V(t1.net)$label <- NA
V(t1.net)$size <- igraph::degree(t1.net, v = V(t1.net), mode = "in")*2
plot(t1.net, layout=layout_in_circle)
#Time 2
E(t2.net)$color <- if_else( E(t2.net)$weight > 0, "green3", "red3")
#V(t2.net)$label <- NA
V(t2.net)$size <- igraph::degree(t2.net, v = V(t2.net), mode = "in")*2
plot(t2.net, layout=layout_in_circle)
#Time 3
E(t3.net)$color <- if_else( E(t3.net)$weight > 0, "green3", "red3")
#V(t3.net)$label <- NA
V(t3.net)$size <- igraph::degree(t3.net, v = V(t3.net), mode = "in")*2
plot(t3.net, layout=layout_in_circle)
#Time 4
E(t4.net)$color <- if_else( E(t4.net)$weight > 0, "green3", "red3")
#V(t4.net)$label <- NA
V(t4.net)$size <- igraph::degree(t4.net, v = V(t4.net), mode = "in")*2
plot(t4.net, layout=layout_in_circle)
par(op)
op <- par(mfrow=c(2,2), mai = c(0,0,0.7,0))
#Making a Signed Graph Objects (Times 1:4)
t1.net <- graph_from_adjacency_matrix(t1, mode = "directed", weighted = T)
t2.net <- graph_from_adjacency_matrix(t2, mode = "directed", weighted = T)
t3.net <- graph_from_adjacency_matrix(t3, mode = "directed", weighted = T)
t4.net <- graph_from_adjacency_matrix(t4, mode = "directed", weighted = T)
#Time 1
E(t1.net)$color <- if_else( E(t1.net)$weight > 0, "green3", "red3")
#V(t1.net)$label <- NA
V(t1.net)$size <- igraph::degree(t1.net, v = V(t1.net), mode = "in")*2
plot(t1.net, layout=layout_in_circle)
title("Time 1")
#Time 2
E(t2.net)$color <- if_else( E(t2.net)$weight > 0, "green3", "red3")
#V(t2.net)$label <- NA
V(t2.net)$size <- igraph::degree(t2.net, v = V(t2.net), mode = "in")*2
plot(t2.net, layout=layout_in_circle)
title("Time 2")
#Time 3
E(t3.net)$color <- if_else( E(t3.net)$weight > 0, "green3", "red3")
#V(t3.net)$label <- NA
V(t3.net)$size <- igraph::degree(t3.net, v = V(t3.net), mode = "in")*2
plot(t3.net, layout=layout_in_circle)
tilte("Time 3")
op <- par(mfrow=c(2,2), mai = c(0,0,0.7,0))
#Making a Signed Graph Objects (Times 1:4)
t1.net <- graph_from_adjacency_matrix(t1, mode = "directed", weighted = T)
t2.net <- graph_from_adjacency_matrix(t2, mode = "directed", weighted = T)
t3.net <- graph_from_adjacency_matrix(t3, mode = "directed", weighted = T)
t4.net <- graph_from_adjacency_matrix(t4, mode = "directed", weighted = T)
#Time 1
E(t1.net)$color <- if_else( E(t1.net)$weight > 0, "green3", "red3")
#V(t1.net)$label <- NA
V(t1.net)$size <- igraph::degree(t1.net, v = V(t1.net), mode = "in")*2
plot(t1.net, layout=layout_in_circle)
title("Time 1")
#Time 2
E(t2.net)$color <- if_else( E(t2.net)$weight > 0, "green3", "red3")
#V(t2.net)$label <- NA
V(t2.net)$size <- igraph::degree(t2.net, v = V(t2.net), mode = "in")*2
plot(t2.net, layout=layout_in_circle)
title("Time 2")
#Time 3
E(t3.net)$color <- if_else( E(t3.net)$weight > 0, "green3", "red3")
#V(t3.net)$label <- NA
V(t3.net)$size <- igraph::degree(t3.net, v = V(t3.net), mode = "in")*2
plot(t3.net, layout=layout_in_circle)
title("Time 3")
#Time 4
E(t4.net)$color <- if_else( E(t4.net)$weight > 0, "green3", "red3")
#V(t4.net)$label <- NA
V(t4.net)$size <- igraph::degree(t4.net, v = V(t4.net), mode = "in")*2
plot(t4.net, layout=layout_in_circle)
title("time 4")
par(op)
op <- par(mfrow=c(2,2), mai = c(0,0,0.7,0))
#Making a Signed Graph Objects (Times 1:4)
t1.net <- graph_from_adjacency_matrix(t1, mode = "directed", weighted = T)
t2.net <- graph_from_adjacency_matrix(t2, mode = "directed", weighted = T)
t3.net <- graph_from_adjacency_matrix(t3, mode = "directed", weighted = T)
t4.net <- graph_from_adjacency_matrix(t4, mode = "directed", weighted = T)
#Time 1
E(t1.net)$color <- if_else( E(t1.net)$weight > 0, "green3", "red3")
V(t1.net)$label <- NA
V(t1.net)$size <- igraph::degree(t1.net, v = V(t1.net), mode = "in")*2
plot(t1.net, layout=layout_in_circle)
title("Time 1")
#Time 2
E(t2.net)$color <- if_else( E(t2.net)$weight > 0, "green3", "red3")
V(t2.net)$label <- NA
V(t2.net)$size <- igraph::degree(t2.net, v = V(t2.net), mode = "in")*2
plot(t2.net, layout=layout_in_circle)
title("Time 2")
#Time 3
E(t3.net)$color <- if_else( E(t3.net)$weight > 0, "green3", "red3")
V(t3.net)$label <- NA
V(t3.net)$size <- igraph::degree(t3.net, v = V(t3.net), mode = "in")*2
plot(t3.net, layout=layout_in_circle)
title("Time 3")
#Time 4
E(t4.net)$color <- if_else( E(t4.net)$weight > 0, "green3", "red3")
V(t4.net)$label <- NA
V(t4.net)$size <- igraph::degree(t4.net, v = V(t4.net), mode = "in")*2
plot(t4.net, layout=layout_in_circle)
title("time 4")
par(op)
library(tidyverse)
library(visdat)
library(naniar)
#Windows
#data1 <- readRDS("E:/Repository/Chicago/Data/cook-block-group-acs5-2011.rds")
#data2 <- readRDS("E:/Repository/Chicago/Data/cook-block-group-sf1-2000.rds")
#data3 <- readRDS("E:/Repository/Chicago/Data/cook-block-group-sf1-2010.rds")
#data4 <- readRDS("E:/Repository/Chicago/Data/cook-block-group-sf3-2000.rds")
#data5 <- readRDS("E:/Repository/Chicago/Data/cook-census-block-sf1-2000.rds")
#data6 <- readRDS("E:/Repository/Chicago/Data/cook-census-block-sf1-2010.rds")
#Mac
data1 <- readRDS("~/desktop/Repository/Chicago/Data/cook-block-group-acs5-2011.rds")
data2 <- readRDS("~/desktop/Repository/Chicago/Data/cook-block-group-sf1-2000.rds")
data3 <- readRDS("~/desktop/Repository/Chicago/Data/cook-block-group-sf1-2010.rds")
data4 <- readRDS("~/desktop/Repository/Chicago/Data/cook-block-group-sf3-2000.rds")
data5 <- readRDS("~/desktop/Repository/Chicago/Data/cook-census-block-sf1-2000.rds")
data6 <- readRDS("~/desktop/Repository/Chicago/Data/cook-census-block-sf1-2010.rds")
#codebook code is on mac or ipad
# working directory
PATH <- "~/desktop/Repository/Chicago/replication"
## load libraries
library("MASS")
library("tidyverse")
library("stargazer")
library("glue")
library("spdplyr")
library("BoundaryDetection")
install.packages("BoundaryDetection")
install.packages("remotes")
remotes::install_github("jlegewie/BoundaryDetection")
View(data1)
